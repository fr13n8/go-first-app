definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  httputil.HTTPError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  models.Message:
    properties:
      body:
        type: string
      conversationId:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  models.NewMessage:
    properties:
      body:
        type: string
      conversationId:
        type: integer
    type: object
  models.SignInData:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.SignInResponseData:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    required:
    - token
    - user
    type: object
  models.SignUpData:
    properties:
      age:
        type: integer
      email:
        type: string
      name:
        type: string
      password:
        type: string
      passwordConfirm:
        type: string
    required:
    - age
    - email
    - name
    - password
    - passwordConfirm
    type: object
  models.UpdatedData:
    properties:
      age:
        type: integer
      email:
        type: string
      name:
        type: string
    required:
    - age
    - email
    - name
    type: object
  models.User:
    properties:
      age:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
      verified:
        type: boolean
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /auth/signin:
    post:
      consumes:
      - application/json
      description: add by json account
      parameters:
      - description: Sign In account
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.SignInData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SignInResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Sign In
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: add by json account
      parameters:
      - description: Sign Up account
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.SignUpData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Sign Up
      tags:
      - auth
  /message/send:
    post:
      consumes:
      - application/json
      description: send message
      parameters:
      - description: Send message
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.NewMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Send Message
      tags:
      - message
  /users:
    get:
      consumes:
      - application/json
      description: Get users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        default:
          description: ""
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: List users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by user ID
      parameters:
      - description: User ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: status
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete an user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get string by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get user details
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update by json user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdatedData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update an user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
